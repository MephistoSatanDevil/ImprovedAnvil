// patches to the executable //

ACTION_IF GAME_IS ~tob~ THEN BEGIN
  COPY bgmain.exe bgmain.exe
    // a patch that eliminates the issue with the limit of summonned creatures
    READ_ASCII 0x2B93DB target_bytes_1 ELSE 0 (0x16)

    READ_LONG   (0x2B93DB + 0x000) var1
    READ_LONG   (0x2B93DB + 0x004) var2
    READ_LONG   (0x2B93DB + 0x008) var3
    READ_LONG   (0x2B93DB + 0x00C) var4
    READ_LONG   (0x2B93DB + 0x010) var5
    READ_SHORT  (0x2B93DB + 0x014) var6

    PATCH_IF (%var1% = 0x4D8B2574)
      AND (%var2% = 0x8B118BF0)
      AND (%var3% = 0x52FFF04D)
      AND (%var4% = 0xD8458910)
      AND (%var5% = 0x8AD8458B)
      AND (%var6% = 0x1248)
    THEN BEGIN
      WRITE_LONG   (0x2B93DB + 0x000) 0xF8830574
      WRITE_LONG   (0x2B93DB + 0x004) 0x8B297509
      WRITE_LONG   (0x2B93DB + 0x008) 0x488BF045
      WRITE_LONG   (0x2B93DB + 0x00C) 0x00F98312
      WRITE_LONG   (0x2B93DB + 0x010) 0x13EB1E74
      WRITE_SHORT  (0x2B93DB + 0x014) 0x9090
    END

    // custom fist placement for monk
    // solution adapted from Sword and Fist mod
    SET "index" = 0
    SET "block_one" = 0
    SET "block_two" = 0
    SET "offset" = 0x737094

    WHILE ("%index%" < 33750) BEGIN // checks through 270,000 bytes; SoA starts at 6E8B00, ToB starts at 757FEC
      SET "index" = ("%index%" + 1)
      READ_ASCII ("%offset%" - 0x08 + ("%index%" * 0x08)) ~previous_value~
      READ_ASCII ("%offset%" +        ("%index%" * 0x08)) ~current_value~
      PATCH_IF (("%current_value%" STRING_COMPARE_CASE ~MFIST1~ = 0) AND NOT ("%previous_value%" STRING_COMPARE_CASE ~MFIST1~ = 0) AND "block_one" = 0) BEGIN
        WRITE_ASCII ("%offset%" + 0x08 + ("%index%" * 0x08)) ~MFIST1~  #8 // level 2
        WRITE_ASCII ("%offset%" + 0x10 + ("%index%" * 0x08)) ~MFIST2~  #8 // level 3
        WRITE_ASCII ("%offset%" + 0x18 + ("%index%" * 0x08)) ~MFIST2~  #8 // level 4
        WRITE_ASCII ("%offset%" + 0x20 + ("%index%" * 0x08)) ~MFIST2~  #8 // level 5
        WRITE_ASCII ("%offset%" + 0x28 + ("%index%" * 0x08)) ~MFIST3~  #8 // level 6
        WRITE_ASCII ("%offset%" + 0x30 + ("%index%" * 0x08)) ~MFIST3~  #8 // level 7
        WRITE_ASCII ("%offset%" + 0x38 + ("%index%" * 0x08)) ~MFIST3~  #8 // level 8
        WRITE_ASCII ("%offset%" + 0x40 + ("%index%" * 0x08)) ~MFIST4~  #8 // level 9
        WRITE_ASCII ("%offset%" + 0x48 + ("%index%" * 0x08)) ~MFIST4~  #8 // level 10
        WRITE_ASCII ("%offset%" + 0x50 + ("%index%" * 0x08)) ~MFIST4~  #8 // level 11
        WRITE_ASCII ("%offset%" + 0x58 + ("%index%" * 0x08)) ~MFIST5~  #8 // level 12
        WRITE_ASCII ("%offset%" + 0x60 + ("%index%" * 0x08)) ~MFIST5~  #8 // level 13
        WRITE_ASCII ("%offset%" + 0x68 + ("%index%" * 0x08)) ~MFIST5~  #8 // level 14
        WRITE_ASCII ("%offset%" + 0x70 + ("%index%" * 0x08)) ~MFIST6~  #8 // level 15
        WRITE_ASCII ("%offset%" + 0x78 + ("%index%" * 0x08)) ~MFIST6~  #8 // level 16
        WRITE_ASCII ("%offset%" + 0x80 + ("%index%" * 0x08)) ~MFIST6~  #8 // level 17
        WRITE_ASCII ("%offset%" + 0x88 + ("%index%" * 0x08)) ~MFIST7~  #8 // level 18
        SET "block_one" = 1
      END
      PATCH_IF (("%current_value%" STRING_COMPARE_CASE ~MFIST7~ = 0) AND ("%previous_value%" STRING_COMPARE_CASE ~MFIST6~ = 0) AND "block_two" = 0) BEGIN // ToB only entries
        SET "index2" = "%index%"
        WRITE_ASCII ("%offset%" + 0x08  + ("%index%" * 0x08)) ~MFIST7~  #8 // level 20
        WRITE_ASCII ("%offset%" + 0x10  + ("%index%" * 0x08)) ~MFIST8~  #8 // level 21
        WRITE_ASCII ("%offset%" + 0x18  + ("%index%" * 0x08)) ~MFIST8~  #8 // level 22
        WRITE_ASCII ("%offset%" + 0x20  + ("%index%" * 0x08)) ~MFIST8~  #8 // level 23
        WRITE_ASCII ("%offset%" + 0x28  + ("%index%" * 0x08)) ~MFIST8~  #8 // level 24
        WRITE_ASCII ("%offset%" + 0x30  + ("%index%" * 0x08)) ~MFIST9~  #8 // level 25
        WRITE_ASCII ("%offset%" + 0x38  + ("%index%" * 0x08)) ~MFIST9~  #8 // level 26
        WRITE_ASCII ("%offset%" + 0x40  + ("%index%" * 0x08)) ~MFIST9~  #8 // level 27
        WRITE_ASCII ("%offset%" + 0x48  + ("%index%" * 0x08)) ~MFIST9~ #8 // level 28
        WRITE_ASCII ("%offset%" + 0x50  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 29
        WRITE_ASCII ("%offset%" + 0x58  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 30
        WRITE_ASCII ("%offset%" + 0x60  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 31
        WRITE_ASCII ("%offset%" + 0x68  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 32
        WRITE_ASCII ("%offset%" + 0x70  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 33
        WRITE_ASCII ("%offset%" + 0x78  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 34
        WRITE_ASCII ("%offset%" + 0x80  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 35
        WRITE_ASCII ("%offset%" + 0x88  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 36
        WRITE_ASCII ("%offset%" + 0x90  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 37
        WRITE_ASCII ("%offset%" + 0x98  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 38
        WRITE_ASCII ("%offset%" + 0xA0  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 39
        WRITE_ASCII ("%offset%" + 0xA8  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 40
        WRITE_ASCII ("%offset%" + 0xB0  + ("%index%" * 0x08)) ~MFIST10~ #8 // level 41
        SET "block_two" = 1
      END
      PATCH_IF ("%block_two%" = 1) BEGIN
        WRITE_ASCII ("%offset%" +         ("%index2%" * 0x08)) ~MFIST7~ #8 // level 19
        SET "block_two" = 2
      END
      PATCH_IF ("%block_two%" = 2) BEGIN
        SET "index" = 33750
      END
    END
  BUT_ONLY_IF_IT_CHANGES
END